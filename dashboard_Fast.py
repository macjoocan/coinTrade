# dashboard.py - TOP 5 ÏÉÅÏäπ/ÌïòÎùΩ ÏΩîÏù∏ Ï∂îÍ∞Ä

import os
import time
import pyupbit
from datetime import datetime
from rich.console import Console
from rich.table import Table
from rich.live import Live
from rich.layout import Layout
from rich.panel import Panel
from rich.text import Text
from config import TRADING_PAIRS, RISK_CONFIG

console = Console()

class TradingDashboard:
    def __init__(self):
        self.console = Console()
        self.layout = Layout()
        self.setup_layout()
        self.price_cache = {}
        
    def setup_layout(self):
        """Î†àÏù¥ÏïÑÏõÉ Íµ¨ÏÑ± - ÌôïÏû•Îêú Î≤ÑÏ†Ñ"""
        self.layout.split(
            Layout(name="header", size=3),
            Layout(name="body"),
            Layout(name="footer", size=4)
        )
        
        # 3Îã® Íµ¨Ï°∞Î°ú Î≥ÄÍ≤Ω
        self.layout["body"].split_row(
            Layout(name="left"),
            Layout(name="center"),
            Layout(name="right")
        )
        
        self.layout["left"].split(
            Layout(name="prices"),
            Layout(name="positions")
        )
        
        self.layout["center"].split(
            Layout(name="top_gainers"),  # ÏÉÅÏäπ TOP 5
            Layout(name="top_losers")    # ÌïòÎùΩ TOP 5
        )
        
        self.layout["right"].split(
            Layout(name="indicators"),
            Layout(name="trades")
        )
    
    def get_header(self):
        """Ìó§Îçî ÏÉùÏÑ±"""
        return Panel(
            f"[bold cyan]Upbit Trading Dashboard[/bold cyan]\n"
            f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            style="bold on dark_blue"
        )
    
    def get_market_movers(self):
        """Ï†ÑÏ≤¥ KRW ÎßàÏºì ÏÉÅÏäπ/ÌïòÎùΩ TOP 5 Ï°∞Ìöå"""
        try:
            # Î™®Îì† KRW ÎßàÏºì Ìã∞Ïª§ Í∞ÄÏ†∏Ïò§Í∏∞
            all_tickers = pyupbit.get_tickers(fiat="KRW")
            
            market_data = []
            
            for ticker in all_tickers[:100]:  # ÏÉÅÏúÑ 100Í∞úÎßå Ï≤¥ÌÅ¨ (ÏÑ±Îä•)
                try:
                    # ÌòÑÏû¨Í∞Ä Ï°∞Ìöå
                    current_price = pyupbit.get_current_price(ticker)
                    
                    if current_price:
                        # ÏùºÎ¥â Îç∞Ïù¥ÌÑ∞Î°ú 24ÏãúÍ∞Ñ Î≥ÄÎèôÎ•† Í≥ÑÏÇ∞
                        df = pyupbit.get_ohlcv(ticker, interval="day", count=2)
                        
                        if df is not None and len(df) >= 2:
                            yesterday_close = df['close'].iloc[-2]
                            change_rate = ((current_price - yesterday_close) / yesterday_close) * 100
                            
                            # Í±∞ÎûòÎüâ ÌôïÏù∏ (ÎÑàÎ¨¥ ÏûëÏùÄ ÏΩîÏù∏ Ï†úÏô∏)
                            volume = df['volume'].iloc[-1] * current_price
                            
                            if volume > 1000000000:  # 10ÏñµÏõê Ïù¥ÏÉÅ Í±∞ÎûòÎüâ
                                symbol = ticker.replace("KRW-", "")
                                market_data.append({
                                    'symbol': symbol,
                                    'price': current_price,
                                    'change': change_rate,
                                    'volume': volume
                                })
                except:
                    continue
            
            # Î≥ÄÎèôÎ•† Í∏∞Ï§Ä Ï†ïÎ†¨
            market_data.sort(key=lambda x: x['change'], reverse=True)
            
            return {
                'gainers': market_data[:5],    # ÏÉÅÏäπ TOP 5
                'losers': market_data[-5:][::-1]  # ÌïòÎùΩ TOP 5 (Ïó≠Ïàú)
            }
            
        except Exception as e:
            console.print(f"[red]Error getting market movers: {e}[/red]")
            return {'gainers': [], 'losers': []}
    
    def get_top_gainers_panel(self):
        """ÏÉÅÏäπ TOP 5 Ìå®ÎÑê"""
        movers = self.get_market_movers()
        
        table = Table(show_header=True, header_style="bold green")
        table.add_column("Rank", style="cyan", width=4)
        table.add_column("Symbol", style="white", width=8)
        table.add_column("Price", justify="right")
        table.add_column("Change", justify="right", style="green")
        
        for i, coin in enumerate(movers['gainers'], 1):
            # Í∞ÄÍ≤© Ìè¨Îß∑ÌåÖ
            if coin['price'] > 1000:
                price_str = f"{coin['price']:,.0f}"
            elif coin['price'] > 1:
                price_str = f"{coin['price']:.1f}"
            else:
                price_str = f"{coin['price']:.3f}"
            
            table.add_row(
                str(i),
                coin['symbol'][:8],  # Ïã¨Î≥º Í∏∏Ïù¥ Ï†úÌïú
                price_str,
                f"‚Üë +{coin['change']:.2f}%"
            )
        
        # Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏùÑ Í≤ΩÏö∞
        if not movers['gainers']:
            table.add_row("-", "Loading...", "-", "-")
        
        return Panel(table, title="üöÄ Top Gainers (24h)", border_style="green")
    
    def get_top_losers_panel(self):
        """ÌïòÎùΩ TOP 5 Ìå®ÎÑê"""
        movers = self.get_market_movers()
        
        table = Table(show_header=True, header_style="bold red")
        table.add_column("Rank", style="cyan", width=4)
        table.add_column("Symbol", style="white", width=8)
        table.add_column("Price", justify="right")
        table.add_column("Change", justify="right", style="red")
        
        for i, coin in enumerate(movers['losers'], 1):
            # Í∞ÄÍ≤© Ìè¨Îß∑ÌåÖ
            if coin['price'] > 1000:
                price_str = f"{coin['price']:,.0f}"
            elif coin['price'] > 1:
                price_str = f"{coin['price']:.1f}"
            else:
                price_str = f"{coin['price']:.3f}"
            
            table.add_row(
                str(i),
                coin['symbol'][:8],
                price_str,
                f"‚Üì {coin['change']:.2f}%"
            )
        
        # Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏùÑ Í≤ΩÏö∞
        if not movers['losers']:
            table.add_row("-", "Loading...", "-", "-")
        
        return Panel(table, title="üìâ Top Losers (24h)", border_style="red")
    
    def get_price_table(self):
        """Í±∞Îûò ÎåÄÏÉÅ ÏΩîÏù∏ Í∞ÄÍ≤© ÌÖåÏù¥Î∏î"""
        table = Table(title="Trading Pairs", show_header=True, header_style="bold magenta")
        table.add_column("Symbol", style="cyan", width=6)
        table.add_column("Price", justify="right", style="white")
        table.add_column("24h", justify="right")
        
        for symbol in TRADING_PAIRS:
            ticker = f"KRW-{symbol}"
            try:
                current_price = pyupbit.get_current_price(ticker)
                
                if current_price:
                    # 24ÏãúÍ∞Ñ Î≥ÄÎèôÎ•†
                    try:
                        df = pyupbit.get_ohlcv(ticker, interval="day", count=2)
                        if len(df) >= 2:
                            yesterday_close = df['close'].iloc[-2]
                            change_rate = ((current_price - yesterday_close) / yesterday_close) * 100
                        else:
                            change_rate = 0
                    except:
                        change_rate = 0
                    
                    # ÏÉâÏÉÅ ÏÑ§Ï†ï
                    if change_rate > 0:
                        change_style = "green"
                        arrow = "‚Üë"
                        sign = "+"
                    elif change_rate < 0:
                        change_style = "red"
                        arrow = "‚Üì"
                        sign = ""
                    else:
                        change_style = "yellow"
                        arrow = "="
                        sign = ""
                    
                    table.add_row(
                        symbol,
                        f"{current_price:,.0f}",
                        f"[{change_style}]{arrow}{sign}{change_rate:.1f}%[/{change_style}]"
                    )
                else:
                    table.add_row(symbol, "N/A", "-")
                    
            except Exception as e:
                table.add_row(symbol, "Error", "-")
        
        return Panel(table, title="Watchlist", border_style="cyan")
    
    def get_position_status(self):
        """Ìè¨ÏßÄÏÖò ÏÉÅÌÉú"""
        positions_text = []
        
        try:
            if os.path.exists('trading.log'):
                with open('trading.log', 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    if lines:
                        for line in reversed(lines[-50:]):
                            if "[BUY]" in line or "Îß§Ïàò ÏôÑÎ£å" in line:
                                if " - " in line:
                                    content = line.split(" - ")[-1].strip()
                                    content = content.replace("[BUY]", "").replace("Îß§Ïàò ÏôÑÎ£å:", "").strip()
                                    positions_text.append(f"BUY: {content[:30]}")
                            elif "[SELL]" in line or "Îß§ÎèÑ ÏôÑÎ£å" in line:
                                if " - " in line:
                                    content = line.split(" - ")[-1].strip()
                                    content = content.replace("[SELL]", "").replace("Îß§ÎèÑ ÏôÑÎ£å:", "").strip()
                                    positions_text.append(f"SELL: {content[:30]}")
                            
                            if len(positions_text) >= 4:
                                break
            
            if not positions_text:
                positions_text = ["No recent trades"]
                
        except Exception as e:
            positions_text = [f"Error: {str(e)[:30]}"]
        
        return Panel(
            "\n".join(positions_text[:4]),
            title="Recent Trades",
            border_style="green"
        )
    
    def get_indicators_panel(self):
        """Í∏∞Ïà†Ï†Å ÏßÄÌëú"""
        indicators_text = []
        
        for symbol in TRADING_PAIRS[:3]:
            ticker = f"KRW-{symbol}"
            try:
                df = pyupbit.get_ohlcv(ticker, interval="minute60", count=20)
                if df is not None and len(df) >= 14:
                    # RSI
                    delta = df['close'].diff()
                    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
                    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
                    rs = gain / loss
                    rsi = 100 - (100 / (1 + rs)).iloc[-1]
                    
                    # RSI ÏÉÅÌÉú
                    if rsi > 70:
                        rsi_color = "red"
                        status = "OB"
                    elif rsi < 30:
                        rsi_color = "green"
                        status = "OS"
                    else:
                        rsi_color = "yellow"
                        status = "N"
                    
                    indicators_text.append(
                        f"{symbol}: RSI[{rsi_color}]{rsi:.0f}({status})[/{rsi_color}]"
                    )
            except:
                pass
        
        return Panel(
            "\n".join(indicators_text) if indicators_text else "Loading...",
            title="Indicators",
            border_style="yellow"
        )
    
    def get_recent_trades(self):
        """Í±∞Îûò Ïã†Ìò∏"""
        signals = []
        
        try:
            if os.path.exists('trading.log'):
                with open('trading.log', 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    
                    for line in reversed(lines[-100:]):
                        if "ÏßÑÏûÖ Ï†êÏàò:" in line:
                            try:
                                score_part = line.split("ÏßÑÏûÖ Ï†êÏàò:")[1].split("/")[0].strip()
                                time_part = line[:8] if len(line) > 8 else ""
                                signals.append(f"{time_part} S:{score_part}")
                            except:
                                pass
                        
                        if len(signals) >= 4:
                            break
            
            if not signals:
                signals = ["No signals"]
                
        except:
            signals = ["Error"]
        
        return Panel(
            "\n".join(signals[:4]),
            title="Signals",
            border_style="magenta"
        )
    
    def get_footer(self):
        """ÏÑ§Ï†ï Ï†ïÎ≥¥"""
        stats_text = (
            f"Daily: 10 | Pos: {RISK_CONFIG.get('max_positions', 2)} | "
            f"Stop: {RISK_CONFIG.get('stop_loss', 0.02)*100:.0f}% | Target: 1.5%"
        )
        
        return Panel(stats_text, title="Config", border_style="dim")
    
    def update(self):
        """ÎåÄÏãúÎ≥¥Îìú ÏóÖÎç∞Ïù¥Ìä∏"""
        try:
            self.layout["header"].update(self.get_header())
            self.layout["prices"].update(self.get_price_table())
            self.layout["positions"].update(self.get_position_status())
            self.layout["top_gainers"].update(self.get_top_gainers_panel())
            self.layout["top_losers"].update(self.get_top_losers_panel())
            self.layout["indicators"].update(self.get_indicators_panel())
            self.layout["trades"].update(self.get_recent_trades())
            self.layout["footer"].update(self.get_footer())
        except Exception as e:
            console.print(f"[red]Update error: {e}[/red]")
        
        return self.layout

def main():
    dashboard = TradingDashboard()
    
    console.clear()
    console.print("[bold cyan]Upbit Trading Dashboard with Market Movers[/bold cyan]")
    console.print("Press Ctrl+C to exit\n")
    
    try:
        # Ï¥àÍ∏∞ Î°úÎî© Î©îÏãúÏßÄ
        console.print("[yellow]Loading market data... This may take a moment.[/yellow]")
        
        with Live(dashboard.update(), refresh_per_second=0.2, console=console) as live:
            while True:
                time.sleep(10)  # 10Ï¥àÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏ (TOP 5Îäî API Ìò∏Ï∂úÏù¥ ÎßéÏùå)
                live.update(dashboard.update())
    except KeyboardInterrupt:
        console.print("\n[bold red]Dashboard stopped[/bold red]")
    except Exception as e:
        console.print(f"\n[bold red]Error: {e}[/bold red]")

if __name__ == "__main__":
    main()